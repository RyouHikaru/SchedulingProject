package mainpackage;

import java.awt.Color;
import java.awt.Component;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.TableCellRenderer;


/**
 *
 * @author 光る諒
 */
public class MainFrame extends javax.swing.JFrame {
    private static final int P_LENGTH = 4;
    private Process[] process;
    private final Color mejoYellow = new Color(255,255,153);
    private final Color mejoGreen = new Color(153,255,153);
    private final Color mejoOrange = new Color(255,204,153);
    private final Color mejoRed = new Color(255,102,102);
    private final Color frameColor = new Color(0, 102,102);
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        this.getContentPane().setBackground(frameColor);
        panel.setBackground(frameColor);
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable() {
            public Component prepareRenderer(TableCellRenderer r, int rw, int col) {
                Component c = super.prepareRenderer(r, rw, col);
                switch(rw) {
                    case 0:
                    c.setBackground(mejoYellow);
                    break;
                    case 1:
                    c.setBackground(mejoGreen );
                    break;
                    case 2:
                    c.setBackground(mejoOrange );
                    break;
                    default:
                    c.setBackground(mejoRed );
                    break;
                }
                return c;
            }
        };
        calculateButton = new javax.swing.JButton();
        algorithmSelector = new javax.swing.JComboBox();
        resetButton = new javax.swing.JButton();
        panel = new javax.swing.JPanel();
        box3 = new javax.swing.JTextField();
        hintLabel = new javax.swing.JLabel();
        box1 = new javax.swing.JTextField();
        box2 = new javax.swing.JTextField();
        box4 = new javax.swing.JTextField();
        averageBurstTimeLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Scheduling Algorithm");
        setResizable(false);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1", null},
                {"2", null},
                {"3", null},
                {"4", null}
            },
            new String [] {
                "Process", "Burst Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setResizable(false);
            table.getColumnModel().getColumn(1).setResizable(false);
        }

        calculateButton.setText("Calculate");
        calculateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateButtonActionPerformed(evt);
            }
        });

        algorithmSelector.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Algorithm","Shortest Job First", "First Come First Serve" }));

        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        box3.setEditable(false);
        box3.setBackground(new java.awt.Color(255, 204, 153));
        box3.setFocusable(false);

        hintLabel.setForeground(new java.awt.Color(255, 255, 255));
        hintLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        hintLabel.setText("Kindly press the \"Calculate\" button twice on the first trial.");
        hintLabel.setFocusable(false);

        box1.setEditable(false);
        box1.setBackground(new java.awt.Color(255, 255, 153));
        box1.setFocusable(false);

        box2.setEditable(false);
        box2.setBackground(new java.awt.Color(153, 255, 153));
        box2.setFocusable(false);

        box4.setEditable(false);
        box4.setBackground(new java.awt.Color(255, 102, 102));
        box4.setFocusable(false);

        averageBurstTimeLabel.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        averageBurstTimeLabel.setForeground(new java.awt.Color(255, 255, 255));
        averageBurstTimeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(averageBurstTimeLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                        .addComponent(box1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(box2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(box3, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(box4, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelLayout.createSequentialGroup()
                        .addComponent(hintLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(3, 3, 3)))
                .addContainerGap())
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(hintLabel)
                .addGap(15, 15, 15)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(box1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(box2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(box3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(box4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(averageBurstTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(algorithmSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(calculateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 670, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(calculateButton)
                    .addComponent(algorithmSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resetButton))
                .addGap(18, 18, 18)
                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void calculateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateButtonActionPerformed
        String chosenAlgorithm;
        
        try {
            chosenAlgorithm = algorithmSelector.getSelectedItem().toString();
            process = new Process[P_LENGTH];
            
            for (int i = 0; i < P_LENGTH; i++) {
                process[i] = new Process();
                process[i].processNumber = table.getValueAt(i, 0).toString();
                process[i].burstTime = Integer.parseInt(table.getValueAt(i, 1).toString());
            }
            
            switch (chosenAlgorithm) {
                case "Shortest Job First":
                    SJF sjf = new SJF();
                    sjf.sortProcess(process);
                    setGanttChart(process);
                    break;
                case "First Come First Serve":
                    setGanttChart(process);
                    break;
                default: 
                    JOptionPane.showMessageDialog(rootPane, "Choose what type of scheduling algorithm to be applied.");
                    return;
            }
        
            averageBurstTimeLabel.setText("Average Burst Time: " + Integer.toString(getAverageBurstTime(process)));
        }
        catch(NullPointerException npe) {
            JOptionPane.showMessageDialog(rootPane, "Please fill up all the labels before calculating.");
        }
        catch(NumberFormatException nfe) {
            JOptionPane.showMessageDialog(rootPane, "Please input numbers only in the burst time.");
        }
    }//GEN-LAST:event_calculateButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        new MainFrame().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_resetButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        new MainFrame().setVisible(true);
    }

    /**
     *  Method to paint the Gantt  Chart depending on the process
     * @param p the processes on which the Gantt Chart will be made
     */
    public void setGanttChart(Process[] p) {
        final int totalWidth = 670, height = 40, y = box1.getY();
        float sumOfBurstTime = 0;
        float[] boxRate = new float[P_LENGTH];
        
        // get the total burst time
        for (int i = 0; i < P_LENGTH; i++) {
            sumOfBurstTime += p[i].burstTime;
        }
        // set the box size's rating
        for (int i = 0; i < P_LENGTH; i++) {
            boxRate[i] = (p[i].burstTime / sumOfBurstTime);
        }
        
        // set box sizes
        box1.setSize((int) (boxRate[0] * totalWidth), height);
        box2.setSize((int) (boxRate[1] * totalWidth), height);
        box3.setSize((int) (boxRate[2] * totalWidth), height);
        box4.setSize((int) (boxRate[3] * totalWidth), height);
        
        // set the location of boxes
        box2.setLocation(box1.getWidth() + box1.getX(), y);
        box3.setLocation(box2.getWidth() + box2.getX(), y);
        box4.setLocation(box3.getWidth() + box3.getX(), y);
        
        // setting the labels of the boxes
        box1.setText(p[0].processNumber);
        box2.setText(p[1].processNumber);
        box3.setText(p[2].processNumber);
        box4.setText(p[3].processNumber);
        
        // finalizing everything
        finalizeBoxColors();
    }

    /**
     * Method used to finalize the colors of every box in the chart
     */
    public void finalizeBoxColors() {
        changeBoxColor(box1);
        changeBoxColor(box2);
        changeBoxColor(box3);
        changeBoxColor(box4);
    }

    /**
     *  Customize the color of the box in the chart
     * @param box the JTextField to be customized.
     */
    public void changeBoxColor(JTextField box) {
        switch (box.getText()) {
            case "1":
                box.setBackground(mejoYellow);
                box.setForeground(mejoYellow);
                break;
            case "2":
                box.setBackground(mejoGreen);
                box.setForeground(mejoGreen);
                break;
            case "3":
                box.setBackground(mejoOrange);
                box.setForeground(mejoOrange);
                break;
            default:
                box.setBackground(mejoRed);
                box.setForeground(mejoRed);
                break;
        }
    }
    public int getAverageBurstTime(Process[] p) {
        int avg = 0;
        for(int i = 0; i < P_LENGTH; i++) {
            avg += p[i].burstTime;
        }
        return (avg / 4);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox algorithmSelector;
    private javax.swing.JLabel averageBurstTimeLabel;
    private javax.swing.JTextField box1;
    private javax.swing.JTextField box2;
    private javax.swing.JTextField box3;
    private javax.swing.JTextField box4;
    private javax.swing.JButton calculateButton;
    private javax.swing.JLabel hintLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panel;
    private javax.swing.JButton resetButton;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
